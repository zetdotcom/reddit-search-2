{"version":3,"sources":["images/reddit.png","images/reddit-avatar.png","serviceWorker.js","constants/searchedRedditsConstants.js","reducers/searchedRedditsReducer.js","constants/redditsListConstants.js","reducers/redditsListReducer.js","reducers/index.js","store.js","components/SearchForm/SearchForm.js","actions/redditsListActions.js","containers/SearchFormContainer.js","actions/searchedRedditsActions.js","components/Header/Header.js","components/SearchedReddits/SearchedReddits.js","containers/SearchedRedditsContainer.js","components/RedditsList/RedditsList.js","containers/RedditsListContainer.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ADD_SEARCHED_REDDIT","REMOVE_SEARCHED_REDDIT","initialState","searchedRedditsReducer","state","action","type","payload","filter","item","FETCH_REDDITS_PENDING","FETCH_REDDITS_SUCCESS","FETCH_REDDITS_ERROR","pending","reddits","error","redditsListReducer","map","data","rootReducer","combineReducers","searchedReddits","redditsList","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","button","minHeight","background","SearchForm","props","lastSearched","getReddits","addSearchedReddit","classes","useState","labelWidth","setLabelWidth","searchedReddit","setSearchedReddit","itemsNumber","setItemsNumber","inputLabel","useRef","handleSubmit","e","preventDefault","useEffect","current","offsetWidth","className","onSubmit","TextField","id","label","variant","name","value","onChange","target","FormControl","InputLabel","ref","Select","labelId","MenuItem","Button","onClick","color","size","fetchRedditsList","searchTerm","searchLimit","dispatch","fetch","then","handleErrors","res","json","children","catch","fetchRedditsError","response","ok","console","log","Error","statusText","SearchFormContainer","useSelector","slice","useDispatch","Header","src","redditImage","alt","chip","borderRadius","border","display","alignContent","padding","deleteIcon","justifyContent","alignItems","SearchedReddits","removeSearchedReddit","i","key","Chip","onDelete","clickable","SearchedRedditsContainer","card","flexDirection","RedditsList","LinearProgress","Card","CardActionArea","CardMedia","thumbnail","includes","redditAvatar","CardContent","Typography","gutterBottom","component","subreddit","title","CardActions","href","url","RedditsListContainer","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0f182da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reddit.08af9c10.png\";","module.exports = __webpack_public_path__ + \"static/media/reddit-avatar.84a04d19.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ADD_SEARCHED_REDDIT = 'ADD_SEARCHED_REDDIT'\r\nexport const REMOVE_SEARCHED_REDDIT = 'REMOVE_SEARCHED_REDDIT'","import { ADD_SEARCHED_REDDIT, REMOVE_SEARCHED_REDDIT } from '../constants/searchedRedditsConstants';\r\n\r\nexport const initialState = ['Javascript', 'Redux', 'React Hooks', 'React Testing Library', 'Cypress js']\r\n\r\nexport function searchedRedditsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_SEARCHED_REDDIT:\r\n      return [...state, action.payload];\r\n    case REMOVE_SEARCHED_REDDIT:\r\n      return state.filter(item => item !== action.payload)\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\n\r\nexport default searchedRedditsReducer;","export const FETCH_REDDITS_PENDING = 'FETCH_REDDITS_PENDING';\r\nexport const FETCH_REDDITS_SUCCESS = 'FETCH_REDDITS_SUCCESS';\r\nexport const FETCH_REDDITS_ERROR = 'FETCH_REDDITS_ERROR';","\r\nimport { FETCH_REDDITS_PENDING, FETCH_REDDITS_SUCCESS, FETCH_REDDITS_ERROR } from 'constants/redditsListConstants';\r\n\r\nconst initialState = {\r\n  pending: false,\r\n  reddits: [],\r\n  error: null\r\n}\r\n\r\nfunction redditsListReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_REDDITS_PENDING:\r\n      return {\r\n        ...state,\r\n        pending: true\r\n      }\r\n    case FETCH_REDDITS_SUCCESS:\r\n      const reddits = action.payload.map(item => item.data)\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        reddits\r\n      }\r\n    case FETCH_REDDITS_ERROR:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: action.error\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default redditsListReducer;","import {combineReducers} from 'redux';\r\nimport searchedReddits from './searchedRedditsReducer'\r\nimport redditsList from './redditsListReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  searchedReddits,\r\n  redditsList\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from './reducers'\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst reduxDev = '__REDUX_DEVTOOLS_EXTENSION_COMPOSE__';\r\nconst composeEnhancers = window[reduxDev] || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n// import FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nimport './SearchForm.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 100,\r\n  },\r\n  button: {\r\n    minHeight: 55,\r\n    background: \"linear-gradient(to right, #4880EC, #019CAD)\"\r\n  }\r\n}));\r\n\r\n\r\nfunction SearchForm(props) {\r\n\r\n  const {lastSearched, getReddits, addSearchedReddit} = props;\r\n\r\n  const classes = useStyles();\r\n  const [labelWidth, setLabelWidth] = useState(200);\r\n  const [searchedReddit, setSearchedReddit] = useState('');\r\n  const [itemsNumber, setItemsNumber] = useState(10);\r\n  const inputLabel = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    setLabelWidth(inputLabel.current.offsetWidth);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    !!searchedReddit && getReddits(searchedReddit, itemsNumber);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [itemsNumber])\r\n\r\n  function isSearchModified() {\r\n    return (lastSearched !== searchedReddit) ? true : false;\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (isSearchModified() && !!searchedReddit) {\r\n      getReddits(searchedReddit, itemsNumber);\r\n      addSearchedReddit(searchedReddit)\r\n    }\r\n  };\r\n\r\n  return (\r\n      <form className=\"search-form\" onSubmit={handleSubmit}>\r\n        <TextField\r\n          id=\"outlined-search\"\r\n          label=\"Search field\"\r\n          type=\"search\" variant=\"outlined\"\r\n          name=\"searchedReddit\"\r\n          value={searchedReddit}\r\n          onChange={e => setSearchedReddit(e.target.value)}\r\n        />\r\n        <FormControl variant=\"outlined\"\r\n          className={classes.formControl}\r\n        >\r\n          <InputLabel ref={inputLabel} id=\"items-label\">\r\n            Items\r\n        </InputLabel>\r\n          <Select\r\n            labelId=\"items-label\"\r\n            id=\"items-select\"\r\n            value={itemsNumber}\r\n            name=\"itemsNumber\"\r\n            onChange={e => setItemsNumber(e.target.value)}\r\n            labelWidth={labelWidth}\r\n          >\r\n            <MenuItem value={10}>10</MenuItem>\r\n            <MenuItem value={20}>20</MenuItem>\r\n            <MenuItem value={30}>30</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <Button onClick={handleSubmit} className={classes.button} variant=\"contained\" color=\"primary\" size=\"large\">\r\n          Get Reddits\r\n        </Button>\r\n      </form>\r\n  )\r\n};\r\n\r\nexport default SearchForm;\r\n\r\n","import {FETCH_REDDITS_PENDING, FETCH_REDDITS_SUCCESS, FETCH_REDDITS_ERROR} from 'constants/redditsListConstants'\r\n\r\nfunction fetchRedditsPending() {\r\n  return {\r\n    type: FETCH_REDDITS_PENDING\r\n  }\r\n}\r\n\r\nfunction fetchRedditsSuccess(reddits) {\r\n  return {\r\n    type: FETCH_REDDITS_SUCCESS,\r\n    payload: reddits\r\n  }\r\n}\r\n\r\nfunction fetchRedditsError(error) {\r\n  return {\r\n    type: FETCH_REDDITS_ERROR,\r\n    error\r\n  }\r\n}\r\n\r\n\r\nexport function fetchRedditsList(searchTerm, searchLimit) {\r\n  return dispatch => {\r\n    dispatch(fetchRedditsPending());\r\n    fetch(`https://www.reddit.com/search.json?q=${searchTerm}&limit=${searchLimit}`)\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        dispatch(fetchRedditsSuccess(json.data.children));\r\n        return json.data.children\r\n      })\r\n      .catch(error => dispatch(fetchRedditsError(error)))\r\n    \r\n  }\r\n}\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    console.log(response)\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport SearchForm from 'components/SearchForm/SearchForm';\r\nimport { fetchRedditsList } from 'actions/redditsListActions';\r\nimport { addSearchedReddit } from 'actions/searchedRedditsActions'\r\n\r\n\r\nfunction SearchFormContainer() {\r\n\r\n  const lastSearched = useSelector(state => state.searchedReddits.slice(-1)[0]);\r\n  const dispatch = useDispatch();\r\n\r\n  function getReddits(searchedReddit, itemsNumber) {\r\n    dispatch(fetchRedditsList(searchedReddit, itemsNumber))\r\n  }\r\n\r\n  function addRedditToSearched(searchedReddit) {\r\n    dispatch(addSearchedReddit(searchedReddit));\r\n  }\r\n\r\n  return (\r\n    <SearchForm \r\n      lastSearched={lastSearched} \r\n      dispatch={dispatch} \r\n      getReddits={getReddits}\r\n      addSearchedReddit={addRedditToSearched}  \r\n    />\r\n  )\r\n};\r\n\r\nexport default SearchFormContainer;\r\n","import {ADD_SEARCHED_REDDIT, REMOVE_SEARCHED_REDDIT} from '../constants/searchedRedditsConstants';\r\n\r\nexport function addSearchedReddit(payload) {\r\n  return {\r\n    type: ADD_SEARCHED_REDDIT,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function removeSearchedReddit(payload) {\r\n  return {\r\n    type: REMOVE_SEARCHED_REDDIT,\r\n    payload\r\n  }\r\n}","import React from 'react';\r\nimport redditImage from 'images/reddit.png';\r\nimport SearchFormContainer from 'containers/SearchFormContainer'\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-image\">\r\n        <img src={redditImage} alt='' />\r\n      </div>\r\n        <SearchFormContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import Button from '@material-ui/core/Button';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport './SearchedReddits.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  chip: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 100,\r\n    minHeight: 45,\r\n    borderRadius: 25,\r\n    color: 'white',\r\n    background: \"linear-gradient(to right, #d9762f, #dd9d25)\",\r\n    border: 'none',\r\n    display: 'flex',\r\n    alignContent: 'center',\r\n    padding: '0 15px'\r\n  },\r\n  deleteIcon: {\r\n    color: 'whitesmoke',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '1px solid whitesmoke',\r\n    borderRadius: '25px'\r\n  }\r\n}));\r\n\r\nfunction SearchedReddits(props) {\r\n\r\n  const {searchedReddits, removeSearchedReddit, fetchRedditsList} = props;\r\n  const classes = useStyles();\r\n  \r\n  return (\r\n    <div className=\"searched-reddits\">\r\n      <div className=\"searched-reddits__text\"> Recently searched</div>\r\n      <div className=\"searched-reddits__list\">\r\n        {searchedReddits.map((item, i) => {\r\n          return (\r\n            <div className=\"searched-reddits__list-item\" key={i}>\r\n              <Chip \r\n                variant=\"outlined\" \r\n                color=\"default\" \r\n                onDelete={() => removeSearchedReddit(item)} \r\n                label={item} \r\n                clickable \r\n                className={classes.chip} \r\n                onClick={() => fetchRedditsList(item)}\r\n                deleteIcon={<span className={classes.deleteIcon}>X</span>}\r\n              />\r\n            </div>\r\n\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default SearchedReddits;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport SearchedReddits from 'components/SearchedReddits/SearchedReddits';\r\nimport { removeSearchedReddit } from 'actions/searchedRedditsActions';\r\nimport { fetchRedditsList } from 'actions/redditsListActions';\r\n\r\n\r\n\r\nfunction SearchedRedditsContainer() {\r\n\r\n  const searchedReddits = useSelector(state => state.searchedReddits);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <SearchedReddits\r\n      searchedReddits={searchedReddits}\r\n      removeSearchedReddit={item => dispatch(removeSearchedReddit(item))}\r\n      fetchRedditsList={item => dispatch(fetchRedditsList(item))}\r\n\r\n    />\r\n  )\r\n};\r\n\r\nexport default SearchedRedditsContainer;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport redditAvatar from 'images/reddit-avatar.png';\r\n\r\nimport './RedditsList.scss';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between'\r\n  },\r\n});\r\n\r\nfunction RedditsList({redditsList, pending}) {\r\n\r\n  // const redditsList = useSelector(state => state.redditsList.reddits)\r\n  // const pending = useSelector(state => state.redditsList.pending)\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"reddits-list\">\r\n      {pending && <LinearProgress />}\r\n\r\n      <div className=\"reddits-list__list\">\r\n        {redditsList.map(item => (\r\n          <Card className={classes.card}>\r\n            <CardActionArea>\r\n              <CardMedia>\r\n                <img className=\"reddits-list__list-item-image\" src={item.thumbnail.includes('http') ? item.thumbnail : redditAvatar} alt=\"\"  />\r\n              </CardMedia>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {item.subreddit}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {item.title}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n              <a href={item.url} target=\"blank\">\r\n                <Button color=\"primary\">\r\n                  See Reddit\r\n              </Button>\r\n              </a>\r\n            </CardActions>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedditsList;","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport RedditsList from 'components/RedditsList/RedditsList';\r\n\r\n\r\nfunction RedditsListContainer() {\r\n\r\n  const redditsList = useSelector(state => state.redditsList.reddits)\r\n  const pending = useSelector(state => state.redditsList.pending)\r\n\r\n  return (\r\n    <RedditsList redditsList={redditsList} pending={pending} />\r\n  )\r\n};\r\n\r\nexport default RedditsListContainer;","import React from 'react';\r\nimport Header from 'components/Header/Header';\r\nimport SearchedRedditsContainer from 'containers/SearchedRedditsContainer';\r\nimport RedditsListContainer from 'containers/RedditsListContainer';\r\nimport './App.scss';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <SearchedRedditsContainer />\r\n      <RedditsListContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}